#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.1
#  in conjunction with Tcl version 8.6
#    Sep 02, 2022 09:55:06 PM CEST  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import pandas as pd
import numpy as np
import seaborn as sns
import random
import dice_sim_support
from scipy.stats import shapiro
import matplotlib.pyplot as plt

global df

class Toplevel1:
    def __init__(self, top=None):
        
        
        def truncate(n, decimals=0):
            multiplier = 10 ** decimals
            return int(n * multiplier) / multiplier
        
        
        def besch_stat(df):
    
    
    
            y = df['dice-sum']
            y_val = 'dice-sum'
            
            anzdf = len(df)
            
            if anzdf > 5000:
                
                df['number'] = range(1, len(df) + 1)
                
                x = df['number']
                
                
                median_y = y.quantile(0.5)
                        
                upper_q_y = y.quantile(0.99869)
                        
                lower_q_y = y.quantile(0.00135)
                min_y = y.min()
                max_y = y.max()
                        
                median_y = truncate(median_y, 5)
                upper_q_y = truncate(upper_q_y, 5)
                lower_q_y = truncate(lower_q_y, 5)
                min_y = truncate(min_y, 5)
                max_y =truncate(max_y, 5)
                count_y = len(y)
                
                
                
                
                
                
                eintrag = 'Median: ' + str(median_y) + '\n\nQ0.998: '  + str(upper_q_y) + '\nQ0.001: ' + str(lower_q_y) + '\n \nMIN: ' + str(min_y) + '\nMAX: '+ str(max_y) + '\nn: ' + str(count_y)
                
                
                ##graphic
                        
                plt.figure(figsize=(6, 4))
                plt.subplot(221) # äquivalent zu: plt.subplot(2, 2, 1)
                sns.histplot(y, kde=True)
                plt.title("Descriptive Statistic Value Column: " + 'Sum-dices')
                plt.subplot(222)
                sns.lineplot(x=x, y=y_val, estimator=None, lw=1, marker='o', data=df)
                #df.plot(y_val)
                plt.axhline(y=median_y,linewidth=2, color='g')
                plt.axhline(y=upper_q_y,linewidth=2, color='orange')
                plt.axhline(y=lower_q_y,linewidth=2, color='orange')
                plt.subplot(223)
                sns.boxplot(x=y)
                plt.subplot(224)
                plt.text(0.1,0.5,eintrag, 
                         ha='left', va='center',
                         fontsize=12)
                plt.axis('off')
                #plt.title(label_chart, fontdict=None, loc='center', pad=None)
                
                plt.show()

        
                
            else:
                
                    
                    
                    
                    
                    
                    
                    
                
                print('Descriptive Statistic \n')
                
                df['number'] = range(1, len(df) + 1)
                
                
                
                
                x = df['number']
                stat, p = shapiro(y)
                        
                ###one side tolerance ut / normal distribution
                if p >= 0.05:
                    #normal verteilt
                    print('normal distribution')
                    
                    mean_y = y.mean()
                    std_y = y.std()
                    count_y = len(y)
                    mean_p_3s = mean_y + 3*std_y
                    mean_m_3s = mean_y - 3*std_y
                    min_y = y.min()
                    max_y = y.max()
                    
                    t_mean_y = truncate(mean_y, 5)
                    t_std_y = truncate(std_y, 5)
                    t_mean_p_3s = truncate(mean_p_3s, 5)
                    t_mean_m_3s = truncate(mean_m_3s, 5)
                    
                    text = 'distribution should follow normal distribution'
                    
                    
                    
                    
                    eintrag = 'Mean: ' + str(t_mean_y) + '\ns: ' + str(t_std_y) + '\n \n+3s: ' + str(t_mean_p_3s) + '\n-3s: ' + str(t_mean_m_3s) + '\n \nMIN: ' + str(min_y) + '\nMAX: '+ str(max_y) + '\nn: ' + str(count_y) + '\n\n' + text
                    
                    print(eintrag +'\np-value:' + str(p))
                    ##graphic
                            
                    plt.figure(figsize=(6, 4))
                    plt.subplot(221) # äquivalent zu: plt.subplot(2, 2, 1)
                    sns.histplot(y, kde=True)
                    plt.title("Descriptive Statistic Value Column: " + 'Sum-Dices')
                    plt.subplot(222)
                    sns.lineplot(x=x, y=y_val, estimator=None, lw=1, marker='o', data=df)
                    #df.plot(y_val)
                    plt.axhline(y=mean_y,linewidth=2, color='g')
                    plt.axhline(y=mean_p_3s,linewidth=2, color='orange')
                    plt.axhline(y=mean_m_3s,linewidth=2, color='orange')
                    plt.subplot(223)
                    sns.boxplot(x=y)
                    plt.subplot(224)
                    plt.text(0.1,0.5,eintrag, 
                             ha='left', va='center',
                             fontsize=12)
                    plt.axis('off')
                    #plt.title(label_chart, fontdict=None, loc='center', pad=None)
                    
                    plt.show()
                    
                else:
                    
                    median_y = y.quantile(0.5)
                            
                    upper_q_y = y.quantile(0.99869)
                            
                    lower_q_y = y.quantile(0.00135)
                    min_y = y.min()
                    max_y = y.max()
                            
                    median_y = truncate(median_y, 5)
                    upper_q_y = truncate(upper_q_y, 5)
                    lower_q_y = truncate(lower_q_y, 5)
                    min_y = truncate(min_y, 5)
                    max_y =truncate(max_y, 5)
                    count_y = len(y)
                    
                    text = 'distribution should not follow normal distribution'
                    
                    
                    
                    
                    eintrag = 'Median: ' + str(median_y) + '\n\nQ0.998: '  + str(upper_q_y) + '\nQ0.001: ' + str(lower_q_y) + '\n \nMIN: ' + str(min_y) + '\nMAX: '+ str(max_y) + '\nn: ' + str(count_y) + '\n\n' + text
                    
                    print(eintrag +'\np-value:' + str(p))
                    
                    ##graphic
                            
                    plt.figure(figsize=(6, 4))
                    plt.subplot(221) # äquivalent zu: plt.subplot(2, 2, 1)
                    sns.histplot(y, kde=True)
                    plt.title("Descriptive Statistic Value Column: " + 'Sum-dices')
                    plt.subplot(222)
                    sns.lineplot(x=x, y=y_val, estimator=None, lw=1, marker='o', data=df)
                    #df.plot(y_val)
                    plt.axhline(y=median_y,linewidth=2, color='g')
                    plt.axhline(y=upper_q_y,linewidth=2, color='orange')
                    plt.axhline(y=lower_q_y,linewidth=2, color='orange')
                    plt.subplot(223)
                    sns.boxplot(x=y)
                    plt.subplot(224)
                    plt.text(0.1,0.5,eintrag, 
                             ha='left', va='center',
                             fontsize=12)
                    plt.axis('off')
                    #plt.title(label_chart, fontdict=None, loc='center', pad=None)
                    
                    plt.show()
    
            
        

    
 

        def wuerfeln():
            
            global df
            
            anz = self.Entry1.get()
            dices = self.TCombobox1.get()
            anz2 = int(anz)
            
            if dices =='1':
                #1 dice
                dicedata =[]
                for i in range(anz2):
                    dicedata.append(random.randint(1,6))
                    
            
                
                
                df = pd.DataFrame(dicedata, columns=['dice-sum'])
                print(df)
                besch_stat(df)
            
            # 2 dices
            if dices =='2':
                dicedata =[]
                for i in range(anz2):
                    dicedata.append(random.randint(1,6))
                df = pd.DataFrame(dicedata, columns=['dice1'])
                print(df)
                i=0
                dicedata2=[]
                for i in range(anz2):
                    dicedata2.append(random.randint(1,6))
                
                se = pd.Series(dicedata2)
                df['dice2'] = se.values
                print(df)
                
                df['dice-sum']=df['dice1']+ df['dice2']
                print(df)    
                
                besch_stat(df)
            
            # 3 dices
            if dices =='3':
                dicedata =[]
                for i in range(anz2):
                    dicedata.append(random.randint(1,6))
                df = pd.DataFrame(dicedata, columns=['dice1'])
                print(df)
                i=0
                dicedata2=[]
                for i in range(anz2):
                    dicedata2.append(random.randint(1,6))
                
                se = pd.Series(dicedata2)
                df['dice2'] = se.values
                print(df)
            
                i=0
                dicedata3=[]
                for i in range(anz2):
                    dicedata3.append(random.randint(1,6))
                
                se = pd.Series(dicedata3)
                df['dice3'] = se.values
                print(df)
                
                df['dice-sum']=df['dice1']+ df['dice2']+df['dice3']
                print(df)
                besch_stat(df)
                
            # 4 dices
            if dices =='4':
                dicedata =[]
                for i in range(anz2):
                    dicedata.append(random.randint(1,6))
                df = pd.DataFrame(dicedata, columns=['dice1'])
                print(df)
                i=0
                dicedata2=[]
                for i in range(anz2):
                    dicedata2.append(random.randint(1,6))
                
                se = pd.Series(dicedata2)
                df['dice2'] = se.values
                print(df)
            
                i=0
                dicedata3=[]
                for i in range(anz2):
                    dicedata3.append(random.randint(1,6))
                
                se = pd.Series(dicedata3)
                df['dice3'] = se.values
                print(df)
                
                i=0
                dicedata4=[]
                for i in range(anz2):
                    dicedata4.append(random.randint(1,6))
                
                se = pd.Series(dicedata4)
                df['dice4'] = se.values
                print(df)
                
                
                
                
                df['dice-sum']=df['dice1']+ df['dice2']+df['dice3']+df['dice4']
                print(df)
                besch_stat(df)
            
            # 5 dices
            if dices =='5':
                dicedata =[]
                for i in range(anz2):
                    dicedata.append(random.randint(1,6))
                df = pd.DataFrame(dicedata, columns=['dice1'])
                print(df)
                i=0
                dicedata2=[]
                for i in range(anz2):
                    dicedata2.append(random.randint(1,6))
                
                se = pd.Series(dicedata2)
                df['dice2'] = se.values
                print(df)
            
                i=0
                dicedata3=[]
                for i in range(anz2):
                    dicedata3.append(random.randint(1,6))
                
                se = pd.Series(dicedata3)
                df['dice3'] = se.values
                print(df)
                
                i=0
                dicedata4=[]
                for i in range(anz2):
                    dicedata4.append(random.randint(1,6))
                
                se = pd.Series(dicedata4)
                df['dice4'] = se.values
                print(df)
                
                i=0
                dicedata5=[]
                for i in range(anz2):
                    dicedata5.append(random.randint(1,6))
                
                se = pd.Series(dicedata5)
                df['dice5'] = se.values
                print(df)
                
                
                
                df['dice-sum']=df['dice1']+ df['dice2']+df['dice3']+df['dice4']+df['dice5']
                print(df)
                besch_stat(df)
            # 6 dices
            if dices =='6':
                dicedata =[]
                for i in range(anz2):
                    dicedata.append(random.randint(1,6))
                df = pd.DataFrame(dicedata, columns=['dice1'])
                print(df)
                i=0
                dicedata2=[]
                for i in range(anz2):
                    dicedata2.append(random.randint(1,6))
                
                se = pd.Series(dicedata2)
                df['dice2'] = se.values
                print(df)
            
                i=0
                dicedata3=[]
                for i in range(anz2):
                    dicedata3.append(random.randint(1,6))
                
                se = pd.Series(dicedata3)
                df['dice3'] = se.values
                print(df)
                
                i=0
                dicedata4=[]
                for i in range(anz2):
                    dicedata4.append(random.randint(1,6))
                
                se = pd.Series(dicedata4)
                df['dice4'] = se.values
                print(df)
                
                i=0
                dicedata5=[]
                for i in range(anz2):
                    dicedata5.append(random.randint(1,6))
                
                se = pd.Series(dicedata5)
                df['dice5'] = se.values
                print(df)
                
                i=0
                dicedata6=[]
                for i in range(anz2):
                    dicedata6.append(random.randint(1,6))
                
                se = pd.Series(dicedata6)
                df['dice6'] = se.values
                print(df)
                
                
                df['dice-sum']=df['dice1']+ df['dice2']+df['dice3']+df['dice4']+df['dice5']+df['dice6']
                print(df)
                besch_stat(df)
                
            # 7 dices
            if dices =='7':
                dicedata =[]
                for i in range(anz2):
                    dicedata.append(random.randint(1,6))
                df = pd.DataFrame(dicedata, columns=['dice1'])
                print(df)
                i=0
                dicedata2=[]
                for i in range(anz2):
                    dicedata2.append(random.randint(1,6))
                
                se = pd.Series(dicedata2)
                df['dice2'] = se.values
                print(df)
            
                i=0
                dicedata3=[]
                for i in range(anz2):
                    dicedata3.append(random.randint(1,6))
                
                se = pd.Series(dicedata3)
                df['dice3'] = se.values
                print(df)
                
                i=0
                dicedata4=[]
                for i in range(anz2):
                    dicedata4.append(random.randint(1,6))
                
                se = pd.Series(dicedata4)
                df['dice4'] = se.values
                print(df)
                
                i=0
                dicedata5=[]
                for i in range(anz2):
                    dicedata5.append(random.randint(1,6))
                
                se = pd.Series(dicedata5)
                df['dice5'] = se.values
                print(df)
                
                i=0
                dicedata6=[]
                for i in range(anz2):
                    dicedata6.append(random.randint(1,6))
                
                se = pd.Series(dicedata6)
                df['dice6'] = se.values
                print(df)
                
                i=0
                dicedata7=[]
                for i in range(anz2):
                    dicedata7.append(random.randint(1,6))
                
                se = pd.Series(dicedata7)
                df['dice7'] = se.values
                print(df)
                
                
                df['dice-sum']=df['dice1']+ df['dice2']+df['dice3']+df['dice4']+df['dice5']+df['dice6']+df['dice7']
                print(df)
                besch_stat(df)
    
            if dices =='8':
                dicedata =[]
                for i in range(anz2):
                    dicedata.append(random.randint(1,6))
                df = pd.DataFrame(dicedata, columns=['dice1'])
                print(df)
                i=0
                dicedata2=[]
                for i in range(anz2):
                    dicedata2.append(random.randint(1,6))
                
                se = pd.Series(dicedata2)
                df['dice2'] = se.values
                print(df)
            
                i=0
                dicedata3=[]
                for i in range(anz2):
                    dicedata3.append(random.randint(1,6))
                
                se = pd.Series(dicedata3)
                df['dice3'] = se.values
                print(df)
                
                i=0
                dicedata4=[]
                for i in range(anz2):
                    dicedata4.append(random.randint(1,6))
                
                se = pd.Series(dicedata4)
                df['dice4'] = se.values
                print(df)
                
                i=0
                dicedata5=[]
                for i in range(anz2):
                    dicedata5.append(random.randint(1,6))
                
                se = pd.Series(dicedata5)
                df['dice5'] = se.values
                print(df)
                
                i=0
                dicedata6=[]
                for i in range(anz2):
                    dicedata6.append(random.randint(1,6))
                
                se = pd.Series(dicedata6)
                df['dice6'] = se.values
                print(df)
                
                i=0
                dicedata7=[]
                for i in range(anz2):
                    dicedata7.append(random.randint(1,6))
                
                se = pd.Series(dicedata7)
                df['dice7'] = se.values
                print(df)
            
                i=0
                dicedata8=[]
                for i in range(anz2):
                    dicedata8.append(random.randint(1,6))
                
                se = pd.Series(dicedata8)
                df['dice8'] = se.values
                print(df)
            
                df['dice-sum']=df['dice1']+ df['dice2']+df['dice3']+df['dice4']+df['dice5']+df['dice6']+df['dice7']+df['dice8']
                print(df)
                besch_stat(df)
        
            if dices =='9':
                dicedata =[]
                for i in range(anz2):
                    dicedata.append(random.randint(1,6))
                df = pd.DataFrame(dicedata, columns=['dice1'])
                print(df)
                i=0
                dicedata2=[]
                for i in range(anz2):
                    dicedata2.append(random.randint(1,6))
                
                se = pd.Series(dicedata2)
                df['dice2'] = se.values
                print(df)
            
                i=0
                dicedata3=[]
                for i in range(anz2):
                    dicedata3.append(random.randint(1,6))
                
                se = pd.Series(dicedata3)
                df['dice3'] = se.values
                print(df)
                
                i=0
                dicedata4=[]
                for i in range(anz2):
                    dicedata4.append(random.randint(1,6))
                
                se = pd.Series(dicedata4)
                df['dice4'] = se.values
                print(df)
                
                i=0
                dicedata5=[]
                for i in range(anz2):
                    dicedata5.append(random.randint(1,6))
                
                se = pd.Series(dicedata5)
                df['dice5'] = se.values
                print(df)
                
                i=0
                dicedata6=[]
                for i in range(anz2):
                    dicedata6.append(random.randint(1,6))
                
                se = pd.Series(dicedata6)
                df['dice6'] = se.values
                print(df)
                
                i=0
                dicedata7=[]
                for i in range(anz2):
                    dicedata7.append(random.randint(1,6))
                
                se = pd.Series(dicedata7)
                df['dice7'] = se.values
                print(df)
            
                i=0
                dicedata8=[]
                for i in range(anz2):
                    dicedata8.append(random.randint(1,6))
                
                se = pd.Series(dicedata8)
                df['dice8'] = se.values
                print(df)
            
                
                i=0
                dicedata9=[]
                for i in range(anz2):
                    dicedata9.append(random.randint(1,6))
                
                se = pd.Series(dicedata9)
                df['dice9'] = se.values
                print(df)
            
                df['dice-sum']=df['dice1']+ df['dice2']+df['dice3']+df['dice4']+df['dice5']+df['dice6']+df['dice7']+df['dice8']+df['dice9']
                print(df)
                besch_stat(df)
                
            if dices =='10':
                dicedata =[]
                for i in range(anz2):
                    dicedata.append(random.randint(1,6))
                df = pd.DataFrame(dicedata, columns=['dice1'])
                print(df)
                i=0
                dicedata2=[]
                for i in range(anz2):
                    dicedata2.append(random.randint(1,6))
                
                se = pd.Series(dicedata2)
                df['dice2'] = se.values
                print(df)
            
                i=0
                dicedata3=[]
                for i in range(anz2):
                    dicedata3.append(random.randint(1,6))
                
                se = pd.Series(dicedata3)
                df['dice3'] = se.values
                print(df)
                
                i=0
                dicedata4=[]
                for i in range(anz2):
                    dicedata4.append(random.randint(1,6))
                
                se = pd.Series(dicedata4)
                df['dice4'] = se.values
                print(df)
                
                i=0
                dicedata5=[]
                for i in range(anz2):
                    dicedata5.append(random.randint(1,6))
                
                se = pd.Series(dicedata5)
                df['dice5'] = se.values
                print(df)
                
                i=0
                dicedata6=[]
                for i in range(anz2):
                    dicedata6.append(random.randint(1,6))
                
                se = pd.Series(dicedata6)
                df['dice6'] = se.values
                print(df)
                
                i=0
                dicedata7=[]
                for i in range(anz2):
                    dicedata7.append(random.randint(1,6))
                
                se = pd.Series(dicedata7)
                df['dice7'] = se.values
                print(df)
            
                i=0
                dicedata8=[]
                for i in range(anz2):
                    dicedata8.append(random.randint(1,6))
                
                se = pd.Series(dicedata8)
                df['dice8'] = se.values
                print(df)
            
                
                i=0
                dicedata9=[]
                for i in range(anz2):
                    dicedata9.append(random.randint(1,6))
                
                se = pd.Series(dicedata9)
                df['dice9'] = se.values
                print(df)
                
                
                i=0
                dicedata10=[]
                for i in range(anz2):
                    dicedata10.append(random.randint(1,6))
                
                se = pd.Series(dicedata10)
                df['dice10'] = se.values
                print(df)
                
                df['dice-sum']=df['dice1']+ df['dice2']+df['dice3']+df['dice4']+df['dice5']+df['dice6']+df['dice7']+df['dice8']+df['dice9']+df['dice10']
                print(df)
        
                besch_stat(df)
            
            df.to_csv('simulation_data.csv', sep=';', decimal=',', header =True, index=False)
        
        
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("300x150+344+201")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1,  1)
        top.title("Dice Simulation by Ricky Helfgen")

        self.top = top
        self.combobox = tk.StringVar()

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.05, rely=0.067, height=21, width=130)
        self.Label1.configure(anchor='w')
        self.Label1.configure(compound='left')
        self.Label1.configure(text='''Number of dices:''')

        self.TCombobox1 = ttk.Combobox(self.top)
        self.TCombobox1.place(relx=0.693, rely=0.067, relheight=0.14
                , relwidth=0.193)
        self.value_list = ['1','2','3','4','5','6','7','8','9', '10']
        self.TCombobox1.configure(values=self.value_list)
        self.TCombobox1.configure(textvariable=self.combobox)
        self.TCombobox1.configure(takefocus="")

        self.Label2 = tk.Label(self.top)
        self.Label2.place(relx=0.05, rely=0.32, height=31, width=50)
        self.Label2.configure(anchor='w')
        self.Label2.configure(compound='left')
        self.Label2.configure(text='''Runs:''')

        self.Entry1 = tk.Entry(self.top)
        self.Entry1.place(relx=0.61, rely=0.36, height=23, relwidth=0.287)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")

        self.Button1 = tk.Button(self.top)
        self.Button1.place(relx=0.533, rely=0.667, height=33, width=113)
        self.Button1.configure(borderwidth="2")
        self.Button1.configure(compound='left')
        self.Button1.configure(text='''Start Simulation''')
        self.Button1.configure(command=wuerfeln)

def start_up():
    dice_sim_support.main()

if __name__ == '__main__':
    dice_sim_support.main()




